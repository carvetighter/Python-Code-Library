#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
#
# File / Package Import
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#        

from saxony_code_library.saxutil.cntr_util import dists_from_ref_cntr
from collections import Counter
import numpy
import pandas

#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
#
# Methods
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#

def get_first_string_value_in_series(m_list_temp):
    ###############################################################################################
    ###############################################################################################
    #
    # this method is a function for a pandas series the returns the last value of a list.  each element of the
    # series is a list
    #
    # Requirements:
    # package pandas
    #
    # Inputs:
    # m_list_temp
    # Type: list
    # Desc: list which is an element of the pandas series
    #
    # Important Info:
    # None
    #
    # Return:
    # object
    # Type: various, variable of the list
    # Desc: the last element of the list in the series
    ###############################################################################################
    ###############################################################################################

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # find the index of the first value that is not an empty string
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    for string_temp in m_list_temp:
        if len(string_temp) > 0:
            break

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # return value
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    return string_temp

def counter_for_string(m_string_phrase):
    ###############################################################################################
    ###############################################################################################
    #
    # this method returns a counter for a string by the letters of the string
    #
    # Requirements:
    # package collections
    #
    # Inputs:
    # m_string_phrase
    # Type: string
    # Desc: the string to count
    #
    # Important Info:
    # None
    #
    # Return:
    # counter object
    # Type: counter
    # Desc: the count of lettters of the string
    ###############################################################################################
    ###############################################################################################    

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # return value
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    return Counter(m_string_phrase)

def cosine_dist_for_counters(m_row, m_string_col_01, m_string_col_02):
    ###############################################################################################
    ###############################################################################################
    #
    # this method computes the cosine distance from two columns in a dataframe
    #
    # Requirements:
    # file cntr_util
    # package numpy, collections
    #
    # Inputs:
    # m_row
    # Type: dataframe row
    # Desc: this is a dummy variable for the row of the dataframe
    #
    # m_string_col_01
    # Type: string
    # Desc: the column 01 to pull the data
    #    
    # m_string_col_02
    # Type: string
    # Desc: the column 01 to pull the data
    #    
    # Important Info:
    # axis must equal 1 in the dataframe.apply() method
    #
    # Return:
    # variable
    # Type: float
    # Desc: the cosine distance between two columns
    ###############################################################################################
    ###############################################################################################    

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # objects declarations
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # time declarations
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # lists declarations
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # variables declarations
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    if m_row[m_string_col_01] == numpy.NaN:
        string_column_01 = ''
    else:
        string_column_01 = m_row[m_string_col_01]

    if m_row[m_string_col_02] == numpy.NaN:
        string_column_02 = ''
    else:
        string_column_02 = m_row[m_string_col_02]

    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #
    # Start
    #
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#                

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # compute counters for each column
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    counter_01 = Counter(string_column_01)
    counter_02 = Counter(string_column_02)

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # compute cosine distance
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    list_distance = dists_from_ref_cntr(counter_01, [counter_02])

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # return value
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    return list_distance[0]

def min_cosine_dist(m_dataframe, m_string_cosine_dist):
    ###############################################################################################
    ###############################################################################################
    #
    # this method finds the min cosine distance if the dataframe is grouped by the partnumber and org key
    #
    # Requirements:
    # package pandas
    #
    # Inputs:
    # m_dataframe
    # Type: pandas dataframe group by
    # Desc: the dummy variable for the dataframe
    # 
    # m_string_cosine_dist
    # Type: string
    # Desc: the column / series name for the cosine distance columns
    #    
    # Important Info:
    # None
    #
    # Return:
    # object
    # Type: pandas dataframe
    # Desc: the dataframe filtered with the lowest cosine distance
    ###############################################################################################
    ###############################################################################################

    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #
    # Start
    #
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#

    #------------------------------------------------------------------------------------------------------------------------------------------------------#
    # return value
    #------------------------------------------------------------------------------------------------------------------------------------------------------#

    if len(m_dataframe) > 0:
        array_bool_min = m_dataframe[m_string_cosine_dist] == m_dataframe[m_string_cosine_dist].min()
        return m_dataframe[array_bool_min]
    else:
        return m_dataframe

def increment_group(m_dataframe_group):
    ###############################################################################################
    ###############################################################################################
    #
    # this method adds the count of the record to a column 'group_count'
    #
    # Requirements:
    # package pandas
    # package numpy 
    #
    # Inputs:
    # m_dataframe_group
    # Type: pandas dataframe group by
    # Desc: the dummy variable for the dataframe
    #  
    # Important Info:
    # None
    #
    # Return:
    # object
    # Type: pandas dataframe
    # Desc: the dataframe with the records in the group counted icrementally
    # m_dataframe_group[0]['group_count'] = 0
    # m_dataframe_group[1]['group_count'] = 1
    # etc....
    ###############################################################################################
    ###############################################################################################

    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #
    # Start
    #
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#
    #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#

    #-----------------------------------------------------------------------------------------#
    # return value
    #-----------------------------------------------------------------------------------------#

    m_dataframe_group['group_count'] = numpy.arange(len(m_dataframe_group))
    return m_dataframe_group